// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uINewGameButton = this.UIMenuFormWindow.UINewGameWindow.UINewGameButton;
            WinButton uIStartGameButton = this.UISettingsWindow.UIStartGameWindow.UIStartGameButton;
            WinButton uICallButton = this.UIDeepPerWindow.UICallWindow.UICallButton;
            WinButton uICheckButton = this.UIDeepPerWindow.UICheckWindow.UICheckButton;
            WinButton uIContinueButton = this.UIHandWinnerWindow.UIContinueWindow.UIContinueButton;
            WinButton uIQuittoMainMenuButton = this.UIDeepPerWindow.UIQuittoMainMenuWindow.UIQuittoMainMenuButton;
            WinButton uIYesButton = this.UIConfirmationWindow.UIYesWindow.UIYesButton;
            WinButton uIStatisticsButton = this.UIMenuFormWindow1.UIStatisticsWindow.UIStatisticsButton;
            WinButton uIBacktoMenuButton = this.UIStatisticsWindow.UIBacktoMenuWindow.UIBacktoMenuButton;
            WinButton uINewGameButton1 = this.UIMenuFormWindow2.UINewGameWindow.UINewGameButton;
            WinCheckBox uITimeBasedCheckBox = this.UISettingsWindow1.UITimeBasedWindow.UITimeBasedCheckBox;
            WinClient uISettingsClient = this.UISettingsWindow1.UISettingsClient;
            WinCheckBox uIRoundbasedCheckBox = this.UISettingsWindow1.UIRoundbasedWindow.UIRoundbasedCheckBox;
            WinSlider uITrackBarPotSizeSlider = this.UISettingsWindow1.UITrackBarPotSizeWindow.UITrackBarPotSizeSlider;
            WinSlider uITrackBarBlindSizeSlider = this.UISettingsWindow1.UITrackBarBlindSizeWindow.UITrackBarBlindSizeSlider;
            WinButton uIStartGameButton1 = this.UISettingsWindow1.UIStartGameWindow.UIStartGameButton;
            WinButton uIRaiseButton = this.UIDeepPerWindow1.UIRaiseWindow.UIRaiseButton;
            WinButton uICallButton1 = this.UIDeepPerWindow1.UICallWindow.UICallButton;
            WinButton uICheckButton1 = this.UIDeepPerWindow1.UICheckWindow.UICheckButton;
            #endregion

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(78, 62));

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton, new Point(107, 24));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(68, 8));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(92, 20));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(29, 39));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(74, 46));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(83, 34));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(83, 34));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(83, 34));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(47, 27));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(74, 9));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(23, 10));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(76, 3));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(57, 17));

            // Click 'Quit to Main Menu' button
            Mouse.Click(uIQuittoMainMenuButton, new Point(22, 24));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(62, 7));

            // Click 'Statistics' button
            Mouse.Click(uIStatisticsButton, new Point(84, 24));

            // Click 'Back to Menu' button
            Mouse.Click(uIBacktoMenuButton, new Point(30, 18));

            // Click 'New Game' button
            Mouse.Click(uINewGameButton1, new Point(79, 49));

            // Select 'Time Based' check box
            uITimeBasedCheckBox.Checked = this.RecordedMethod1Params.UITimeBasedCheckBoxChecked;

            // Click 'Settings' client
            Mouse.Click(uISettingsClient, new Point(192, 204));

            // Select 'Round based' check box
            uIRoundbasedCheckBox.Checked = this.RecordedMethod1Params.UIRoundbasedCheckBoxChecked;

            // Set position '4159' in 'trackBarPotSize' slider
            uITrackBarPotSizeSlider.PositionAsString = this.RecordedMethod1Params.UITrackBarPotSizeSliderPositionAsString;

            // Set position '267.4' in 'trackBarBlindSize' slider
            uITrackBarBlindSizeSlider.PositionAsString = this.RecordedMethod1Params.UITrackBarBlindSizeSliderPositionAsString;

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton1, new Point(130, 57));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(87, 10));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(9, 32));

            // Right-Click 'Raise' button
            Mouse.Click(uIRaiseButton, MouseButtons.Right, ModifierKeys.None, new Point(9, 32));

            // Click 'Call' button
            Mouse.Click(uICallButton1, new Point(51, 46));

            // Click 'Check' button
            Mouse.Click(uICheckButton1, new Point(55, 25));

            // Click 'Call' button
            Mouse.Click(uICallButton1, new Point(31, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton1, new Point(88, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton1, new Point(88, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton1, new Point(88, 29));

            // Click 'Check' button
            Mouse.Click(uICheckButton1, new Point(88, 29));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(37, 26));
        }
        
        /// <summary>
        /// fun
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uINewGameButton = this.UIMenuFormWindow.UINewGameWindow.UINewGameButton;
            WinButton uIStartGameButton = this.UISettingsWindow.UIStartGameWindow.UIStartGameButton;
            WinButton uICallButton = this.UIDeepPerWindow.UICallWindow.UICallButton;
            WinButton uICheckButton = this.UIDeepPerWindow.UICheckWindow.UICheckButton;
            WinButton uIContinueButton = this.UIHandWinnerWindow.UIContinueWindow.UIContinueButton;
            WinButton uIQuittoMainMenuButton = this.UIDeepPerWindow.UIQuittoMainMenuWindow.UIQuittoMainMenuButton;
            WinButton uIYesButton = this.UIConfirmationWindow.UIYesWindow.UIYesButton;
            WinButton uIStatisticsButton = this.UIMenuFormWindow1.UIStatisticsWindow.UIStatisticsButton;
            WinButton uIBacktoMenuButton = this.UIStatisticsWindow.UIBacktoMenuWindow.UIBacktoMenuButton;
            WinButton uINewGameButton1 = this.UIMenuFormWindow2.UINewGameWindow.UINewGameButton;
            WinCheckBox uITimeBasedCheckBox = this.UISettingsWindow1.UITimeBasedWindow.UITimeBasedCheckBox;
            WinClient uISettingsClient = this.UISettingsWindow1.UISettingsClient;
            WinCheckBox uIRoundbasedCheckBox = this.UISettingsWindow1.UIRoundbasedWindow.UIRoundbasedCheckBox;
            WinSlider uITrackBarPotSizeSlider = this.UISettingsWindow1.UITrackBarPotSizeWindow.UITrackBarPotSizeSlider;
            WinSlider uITrackBarBlindSizeSlider = this.UISettingsWindow1.UITrackBarBlindSizeWindow.UITrackBarBlindSizeSlider;
            WinButton uIStartGameButton1 = this.UISettingsWindow1.UIStartGameWindow.UIStartGameButton;
            WinButton uIRaiseButton = this.UIDeepPerWindow1.UIRaiseWindow.UIRaiseButton;
            WinButton uICallButton1 = this.UIDeepPerWindow1.UICallWindow.UICallButton;
            WinButton uICheckButton1 = this.UIDeepPerWindow1.UICheckWindow.UICheckButton;
            WinButton uIRaiseButton1 = this.UIDeepPerWindow.UIRaiseWindow.UIRaiseButton;
            WinButton uIQuitButton = this.UIMenuFormWindow1.UIQuitWindow.UIQuitButton;
            #endregion

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(78, 62));

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton, new Point(107, 24));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(68, 8));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(92, 20));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(29, 39));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(74, 46));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(83, 34));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(83, 34));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(83, 34));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(47, 27));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(74, 9));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(80, 20));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(23, 10));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(76, 3));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(66, 21));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(57, 17));

            // Click 'Quit to Main Menu' button
            Mouse.Click(uIQuittoMainMenuButton, new Point(22, 24));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(62, 7));

            // Click 'Statistics' button
            Mouse.Click(uIStatisticsButton, new Point(84, 24));

            // Click 'Back to Menu' button
            Mouse.Click(uIBacktoMenuButton, new Point(30, 18));

            // Click 'New Game' button
            Mouse.Click(uINewGameButton1, new Point(79, 49));

            // Select 'Time Based' check box
            uITimeBasedCheckBox.Checked = this.RecordedMethod2Params.UITimeBasedCheckBoxChecked;

            // Click 'Settings' client
            Mouse.Click(uISettingsClient, new Point(192, 204));

            // Select 'Round based' check box
            uIRoundbasedCheckBox.Checked = this.RecordedMethod2Params.UIRoundbasedCheckBoxChecked;

            // Set position '4159' in 'trackBarPotSize' slider
            uITrackBarPotSizeSlider.PositionAsString = this.RecordedMethod2Params.UITrackBarPotSizeSliderPositionAsString;

            // Set position '267.4' in 'trackBarBlindSize' slider
            uITrackBarBlindSizeSlider.PositionAsString = this.RecordedMethod2Params.UITrackBarBlindSizeSliderPositionAsString;

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton1, new Point(130, 57));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(87, 10));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(9, 32));

            // Right-Click 'Raise' button
            Mouse.Click(uIRaiseButton, MouseButtons.Right, ModifierKeys.None, new Point(9, 32));

            // Click 'Call' button
            Mouse.Click(uICallButton1, new Point(51, 46));

            // Click 'Check' button
            Mouse.Click(uICheckButton1, new Point(55, 25));

            // Click 'Call' button
            Mouse.Click(uICallButton1, new Point(31, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton1, new Point(88, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton1, new Point(88, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton1, new Point(88, 29));

            // Click 'Check' button
            Mouse.Click(uICheckButton1, new Point(88, 29));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(37, 26));

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(109, 16));

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton, new Point(111, 4));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(78, 0));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(58, 36));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(58, 36));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(58, 36));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(58, 36));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(58, 36));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(60, 30));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(47, 39));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(67, 42));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(67, 42));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(67, 42));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton1, new Point(41, 41));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(3, 38));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(70, 38));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(70, 38));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(70, 38));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(70, 38));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(70, 38));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(70, 38));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(90, 17));

            // Click 'Quit to Main Menu' button
            Mouse.Click(uIQuittoMainMenuButton, new Point(9, 31));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(23, 20));

            // Click 'Quit' button
            Mouse.Click(uIQuitButton, new Point(73, 16));
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinButton uINewGameButton = this.UIMenuFormWindow.UINewGameWindow.UINewGameButton;
            WinButton uIStartGameButton = this.UISettingsWindow.UIStartGameWindow.UIStartGameButton;
            WinClient uIDeepPerClient = this.UIDeepPerWindow.UIDeepPerClient;
            WinButton uICallButton = this.UIDeepPerWindow.UICallWindow.UICallButton;
            WinButton uICheckButton = this.UIDeepPerWindow.UICheckWindow.UICheckButton;
            WinButton uIRaiseButton = this.UIDeepPerWindow.UIRaiseWindow.UIRaiseButton;
            WinButton uIContinueButton = this.UIHandWinnerWindow.UIContinueWindow.UIContinueButton;
            WinButton uILukButton = this.UIDeepPerWindow.UIDeepPerTitleBar.UILukButton;
            #endregion

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(59, 36));

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton, new Point(114, 10));

            // Click 'Deep Per' client
            Mouse.Click(uIDeepPerClient, new Point(365, 587));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(66, 23));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(96, 22));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(48, 18));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(85, 24));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(94, 31));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(7, 27));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(52, 28));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(87, 28));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(87, 28));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(87, 28));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(87, 28));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(87, 28));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(79, 22));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(82, 11));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(91, 17));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(91, 17));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(91, 17));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(88, 21));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(88, 21));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(88, 21));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(88, 21));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(51, 11));

            // Click 'Luk' button
            Mouse.Click(uILukButton, new Point(24, 4));
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinButton uINewGameButton = this.UIMenuFormWindow.UINewGameWindow.UINewGameButton;
            WinCheckBox uITimeBasedCheckBox = this.UISettingsWindow.UITimeBasedWindow.UITimeBasedCheckBox;
            WinCheckBox uIRoundbasedCheckBox = this.UISettingsWindow.UIRoundbasedWindow.UIRoundbasedCheckBox;
            WinSlider uITrackBarBlindIncreasSlider = this.UISettingsWindow.UITrackBarBlindIncreasWindow.UITrackBarBlindIncreasSlider;
            WinSlider uITrackBarPotSizeSlider = this.UISettingsWindow.UITrackBarPotSizeWindow.UITrackBarPotSizeSlider;
            WinSlider uITrackBarBlindSizeSlider = this.UISettingsWindow.UITrackBarBlindSizeWindow.UITrackBarBlindSizeSlider;
            WinButton uIStartGameButton = this.UISettingsWindow.UIStartGameWindow.UIStartGameButton;
            WinButton uICallButton = this.UIDeepPerWindow.UICallWindow.UICallButton;
            WinButton uICheckButton = this.UIDeepPerWindow.UICheckWindow.UICheckButton;
            WinButton uIRaiseButton = this.UIDeepPerWindow.UIRaiseWindow.UIRaiseButton;
            WinButton uIContinueButton = this.UIHandWinnerWindow.UIContinueWindow.UIContinueButton;
            WinClient uIDeepPerClient = this.UIDeepPerWindow.UIDeepPerClient;
            WinButton uIQuittoMainMenuButton = this.UIDeepPerWindow.UIQuittoMainMenuWindow.UIQuittoMainMenuButton;
            WinButton uIYesButton = this.UIConfirmationWindow.UIYesWindow.UIYesButton;
            WinButton uIQuitButton = this.UIMenuFormWindow1.UIQuitWindow.UIQuitButton;
            #endregion

            // Click 'New Game' button
            Mouse.Click(uINewGameButton, new Point(68, 57));

            // Select 'Time Based' check box
            uITimeBasedCheckBox.Checked = this.RecordedMethod4Params.UITimeBasedCheckBoxChecked;

            // Select 'Round based' check box
            uIRoundbasedCheckBox.Checked = this.RecordedMethod4Params.UIRoundbasedCheckBoxChecked;

            // Set position '10' in 'trackBarBlindIncrease' slider
            uITrackBarBlindIncreasSlider.PositionAsString = this.RecordedMethod4Params.UITrackBarBlindIncreasSliderPositionAsString;

            // Set position '3268' in 'trackBarPotSize' slider
            uITrackBarPotSizeSlider.PositionAsString = this.RecordedMethod4Params.UITrackBarPotSizeSliderPositionAsString;

            // Set position '376.3' in 'trackBarBlindSize' slider
            uITrackBarBlindSizeSlider.PositionAsString = this.RecordedMethod4Params.UITrackBarBlindSizeSliderPositionAsString;

            // Click 'Start Game' button
            Mouse.Click(uIStartGameButton, new Point(111, 28));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(72, 19));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(50, 29));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(89, 37));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(19, 33));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(71, 27));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(97, 36));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(12, 29));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(64, 18));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(82, 23));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(82, 23));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(17, 25));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(29, 28));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(72, 25));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(72, 25));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(72, 25));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(97, 26));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(79, 22));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(87, 31));

            // Click 'Deep Per' client
            Mouse.Click(uIDeepPerClient, new Point(297, 612));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(106, 24));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(24, 21));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(85, 24));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(56, 29));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(65, 32));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(32, 17));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(74, 27));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(94, 25));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(58, 30));

            // Click 'Raise' button
            Mouse.Click(uIRaiseButton, new Point(31, 19));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(87, 30));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(16, 30));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(77, 28));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(77, 28));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(38, 29));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(87, 23));

            // Click 'Call' button
            Mouse.Click(uICallButton, new Point(20, 31));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(88, 31));

            // Double-Click 'Check' button
            Mouse.DoubleClick(uICheckButton, new Point(98, 32));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(98, 32));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(98, 32));

            // Click 'Check' button
            Mouse.Click(uICheckButton, new Point(105, 31));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(76, 16));

            // Click 'Quit to Main Menu' button
            Mouse.Click(uIQuittoMainMenuButton, new Point(28, 21));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(56, 19));

            // Click 'Quit' button
            Mouse.Click(uIQuitButton, new Point(66, 15));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public UIMenuFormWindow UIMenuFormWindow
        {
            get
            {
                if ((this.mUIMenuFormWindow == null))
                {
                    this.mUIMenuFormWindow = new UIMenuFormWindow();
                }
                return this.mUIMenuFormWindow;
            }
        }
        
        public UISettingsWindow UISettingsWindow
        {
            get
            {
                if ((this.mUISettingsWindow == null))
                {
                    this.mUISettingsWindow = new UISettingsWindow();
                }
                return this.mUISettingsWindow;
            }
        }
        
        public UIDeepPerWindow UIDeepPerWindow
        {
            get
            {
                if ((this.mUIDeepPerWindow == null))
                {
                    this.mUIDeepPerWindow = new UIDeepPerWindow();
                }
                return this.mUIDeepPerWindow;
            }
        }
        
        public UIHandWinnerWindow UIHandWinnerWindow
        {
            get
            {
                if ((this.mUIHandWinnerWindow == null))
                {
                    this.mUIHandWinnerWindow = new UIHandWinnerWindow();
                }
                return this.mUIHandWinnerWindow;
            }
        }
        
        public UIConfirmationWindow UIConfirmationWindow
        {
            get
            {
                if ((this.mUIConfirmationWindow == null))
                {
                    this.mUIConfirmationWindow = new UIConfirmationWindow();
                }
                return this.mUIConfirmationWindow;
            }
        }
        
        public UIMenuFormWindow1 UIMenuFormWindow1
        {
            get
            {
                if ((this.mUIMenuFormWindow1 == null))
                {
                    this.mUIMenuFormWindow1 = new UIMenuFormWindow1();
                }
                return this.mUIMenuFormWindow1;
            }
        }
        
        public UIStatisticsWindow1 UIStatisticsWindow
        {
            get
            {
                if ((this.mUIStatisticsWindow == null))
                {
                    this.mUIStatisticsWindow = new UIStatisticsWindow1();
                }
                return this.mUIStatisticsWindow;
            }
        }
        
        public UIMenuFormWindow2 UIMenuFormWindow2
        {
            get
            {
                if ((this.mUIMenuFormWindow2 == null))
                {
                    this.mUIMenuFormWindow2 = new UIMenuFormWindow2();
                }
                return this.mUIMenuFormWindow2;
            }
        }
        
        public UISettingsWindow1 UISettingsWindow1
        {
            get
            {
                if ((this.mUISettingsWindow1 == null))
                {
                    this.mUISettingsWindow1 = new UISettingsWindow1();
                }
                return this.mUISettingsWindow1;
            }
        }
        
        public UIDeepPerWindow1 UIDeepPerWindow1
        {
            get
            {
                if ((this.mUIDeepPerWindow1 == null))
                {
                    this.mUIDeepPerWindow1 = new UIDeepPerWindow1();
                }
                return this.mUIDeepPerWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private UIMenuFormWindow mUIMenuFormWindow;
        
        private UISettingsWindow mUISettingsWindow;
        
        private UIDeepPerWindow mUIDeepPerWindow;
        
        private UIHandWinnerWindow mUIHandWinnerWindow;
        
        private UIConfirmationWindow mUIConfirmationWindow;
        
        private UIMenuFormWindow1 mUIMenuFormWindow1;
        
        private UIStatisticsWindow1 mUIStatisticsWindow;
        
        private UIMenuFormWindow2 mUIMenuFormWindow2;
        
        private UISettingsWindow1 mUISettingsWindow1;
        
        private UIDeepPerWindow1 mUIDeepPerWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Time Based' check box
        /// </summary>
        public bool UITimeBasedCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Round based' check box
        /// </summary>
        public bool UIRoundbasedCheckBoxChecked = true;
        
        /// <summary>
        /// Set position '4159' in 'trackBarPotSize' slider
        /// </summary>
        public string UITrackBarPotSizeSliderPositionAsString = "4159";
        
        /// <summary>
        /// Set position '267.4' in 'trackBarBlindSize' slider
        /// </summary>
        public string UITrackBarBlindSizeSliderPositionAsString = "267.4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Time Based' check box
        /// </summary>
        public bool UITimeBasedCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Round based' check box
        /// </summary>
        public bool UIRoundbasedCheckBoxChecked = true;
        
        /// <summary>
        /// Set position '4159' in 'trackBarPotSize' slider
        /// </summary>
        public string UITrackBarPotSizeSliderPositionAsString = "4159";
        
        /// <summary>
        /// Set position '267.4' in 'trackBarBlindSize' slider
        /// </summary>
        public string UITrackBarBlindSizeSliderPositionAsString = "267.4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Time Based' check box
        /// </summary>
        public bool UITimeBasedCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Round based' check box
        /// </summary>
        public bool UIRoundbasedCheckBoxChecked = true;
        
        /// <summary>
        /// Set position '10' in 'trackBarBlindIncrease' slider
        /// </summary>
        public string UITrackBarBlindIncreasSliderPositionAsString = "10";
        
        /// <summary>
        /// Set position '3268' in 'trackBarPotSize' slider
        /// </summary>
        public string UITrackBarPotSizeSliderPositionAsString = "3268";
        
        /// <summary>
        /// Set position '376.3' in 'trackBarBlindSize' slider
        /// </summary>
        public string UITrackBarBlindSizeSliderPositionAsString = "376.3";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMenuFormWindow : WinWindow
    {
        
        public UIMenuFormWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MenuForm";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public UINewGameWindow UINewGameWindow
        {
            get
            {
                if ((this.mUINewGameWindow == null))
                {
                    this.mUINewGameWindow = new UINewGameWindow(this);
                }
                return this.mUINewGameWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewGameWindow mUINewGameWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINewGameWindow : WinWindow
    {
        
        public UINewGameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonNewGame";
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public WinButton UINewGameButton
        {
            get
            {
                if ((this.mUINewGameButton == null))
                {
                    this.mUINewGameButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINewGameButton.SearchProperties[WinButton.PropertyNames.Name] = "New Game";
                    this.mUINewGameButton.WindowTitles.Add("MenuForm");
                    #endregion
                }
                return this.mUINewGameButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINewGameButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISettingsWindow : WinWindow
    {
        
        public UISettingsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Settings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public UIStartGameWindow UIStartGameWindow
        {
            get
            {
                if ((this.mUIStartGameWindow == null))
                {
                    this.mUIStartGameWindow = new UIStartGameWindow(this);
                }
                return this.mUIStartGameWindow;
            }
        }
        
        public UITimeBasedWindow UITimeBasedWindow
        {
            get
            {
                if ((this.mUITimeBasedWindow == null))
                {
                    this.mUITimeBasedWindow = new UITimeBasedWindow(this);
                }
                return this.mUITimeBasedWindow;
            }
        }
        
        public UIRoundbasedWindow UIRoundbasedWindow
        {
            get
            {
                if ((this.mUIRoundbasedWindow == null))
                {
                    this.mUIRoundbasedWindow = new UIRoundbasedWindow(this);
                }
                return this.mUIRoundbasedWindow;
            }
        }
        
        public UITrackBarBlindIncreasWindow UITrackBarBlindIncreasWindow
        {
            get
            {
                if ((this.mUITrackBarBlindIncreasWindow == null))
                {
                    this.mUITrackBarBlindIncreasWindow = new UITrackBarBlindIncreasWindow(this);
                }
                return this.mUITrackBarBlindIncreasWindow;
            }
        }
        
        public UITrackBarPotSizeWindow UITrackBarPotSizeWindow
        {
            get
            {
                if ((this.mUITrackBarPotSizeWindow == null))
                {
                    this.mUITrackBarPotSizeWindow = new UITrackBarPotSizeWindow(this);
                }
                return this.mUITrackBarPotSizeWindow;
            }
        }
        
        public UITrackBarBlindSizeWindow UITrackBarBlindSizeWindow
        {
            get
            {
                if ((this.mUITrackBarBlindSizeWindow == null))
                {
                    this.mUITrackBarBlindSizeWindow = new UITrackBarBlindSizeWindow(this);
                }
                return this.mUITrackBarBlindSizeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIStartGameWindow mUIStartGameWindow;
        
        private UITimeBasedWindow mUITimeBasedWindow;
        
        private UIRoundbasedWindow mUIRoundbasedWindow;
        
        private UITrackBarBlindIncreasWindow mUITrackBarBlindIncreasWindow;
        
        private UITrackBarPotSizeWindow mUITrackBarPotSizeWindow;
        
        private UITrackBarBlindSizeWindow mUITrackBarBlindSizeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartGameWindow : WinWindow
    {
        
        public UIStartGameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonStartGame";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartGameButton
        {
            get
            {
                if ((this.mUIStartGameButton == null))
                {
                    this.mUIStartGameButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartGameButton.SearchProperties[WinButton.PropertyNames.Name] = "Start Game";
                    this.mUIStartGameButton.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUIStartGameButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartGameButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITimeBasedWindow : WinWindow
    {
        
        public UITimeBasedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBoxTimeBased";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UITimeBasedCheckBox
        {
            get
            {
                if ((this.mUITimeBasedCheckBox == null))
                {
                    this.mUITimeBasedCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUITimeBasedCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Time Based";
                    this.mUITimeBasedCheckBox.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITimeBasedCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUITimeBasedCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoundbasedWindow : WinWindow
    {
        
        public UIRoundbasedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBoxRoundBased";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIRoundbasedCheckBox
        {
            get
            {
                if ((this.mUIRoundbasedCheckBox == null))
                {
                    this.mUIRoundbasedCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIRoundbasedCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Round based";
                    this.mUIRoundbasedCheckBox.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUIRoundbasedCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIRoundbasedCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITrackBarBlindIncreasWindow : WinWindow
    {
        
        public UITrackBarBlindIncreasWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trackBarBlindIncrease";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinSlider UITrackBarBlindIncreasSlider
        {
            get
            {
                if ((this.mUITrackBarBlindIncreasSlider == null))
                {
                    this.mUITrackBarBlindIncreasSlider = new WinSlider(this);
                    #region Search Criteria
                    this.mUITrackBarBlindIncreasSlider.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITrackBarBlindIncreasSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUITrackBarBlindIncreasSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITrackBarPotSizeWindow : WinWindow
    {
        
        public UITrackBarPotSizeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trackBarPotSize";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinSlider UITrackBarPotSizeSlider
        {
            get
            {
                if ((this.mUITrackBarPotSizeSlider == null))
                {
                    this.mUITrackBarPotSizeSlider = new WinSlider(this);
                    #region Search Criteria
                    this.mUITrackBarPotSizeSlider.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITrackBarPotSizeSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUITrackBarPotSizeSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITrackBarBlindSizeWindow : WinWindow
    {
        
        public UITrackBarBlindSizeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trackBarBlindSize";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinSlider UITrackBarBlindSizeSlider
        {
            get
            {
                if ((this.mUITrackBarBlindSizeSlider == null))
                {
                    this.mUITrackBarBlindSizeSlider = new WinSlider(this);
                    #region Search Criteria
                    this.mUITrackBarBlindSizeSlider.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITrackBarBlindSizeSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUITrackBarBlindSizeSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeepPerWindow : WinWindow
    {
        
        public UIDeepPerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Deep Per";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public UICallWindow UICallWindow
        {
            get
            {
                if ((this.mUICallWindow == null))
                {
                    this.mUICallWindow = new UICallWindow(this);
                }
                return this.mUICallWindow;
            }
        }
        
        public UICheckWindow UICheckWindow
        {
            get
            {
                if ((this.mUICheckWindow == null))
                {
                    this.mUICheckWindow = new UICheckWindow(this);
                }
                return this.mUICheckWindow;
            }
        }
        
        public UIQuittoMainMenuWindow UIQuittoMainMenuWindow
        {
            get
            {
                if ((this.mUIQuittoMainMenuWindow == null))
                {
                    this.mUIQuittoMainMenuWindow = new UIQuittoMainMenuWindow(this);
                }
                return this.mUIQuittoMainMenuWindow;
            }
        }
        
        public UIRaiseWindow UIRaiseWindow
        {
            get
            {
                if ((this.mUIRaiseWindow == null))
                {
                    this.mUIRaiseWindow = new UIRaiseWindow(this);
                }
                return this.mUIRaiseWindow;
            }
        }
        
        public WinClient UIDeepPerClient
        {
            get
            {
                if ((this.mUIDeepPerClient == null))
                {
                    this.mUIDeepPerClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDeepPerClient.SearchProperties[WinControl.PropertyNames.Name] = "Deep Per";
                    this.mUIDeepPerClient.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUIDeepPerClient;
            }
        }
        
        public UIDeepPerTitleBar UIDeepPerTitleBar
        {
            get
            {
                if ((this.mUIDeepPerTitleBar == null))
                {
                    this.mUIDeepPerTitleBar = new UIDeepPerTitleBar(this);
                }
                return this.mUIDeepPerTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICallWindow mUICallWindow;
        
        private UICheckWindow mUICheckWindow;
        
        private UIQuittoMainMenuWindow mUIQuittoMainMenuWindow;
        
        private UIRaiseWindow mUIRaiseWindow;
        
        private WinClient mUIDeepPerClient;
        
        private UIDeepPerTitleBar mUIDeepPerTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICallWindow : WinWindow
    {
        
        public UICallWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCall";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UICallButton
        {
            get
            {
                if ((this.mUICallButton == null))
                {
                    this.mUICallButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICallButton.SearchProperties[WinButton.PropertyNames.Name] = "Call";
                    this.mUICallButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUICallButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICallButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICheckWindow : WinWindow
    {
        
        public UICheckWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCheck";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UICheckButton
        {
            get
            {
                if ((this.mUICheckButton == null))
                {
                    this.mUICheckButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICheckButton.SearchProperties[WinButton.PropertyNames.Name] = "Check";
                    this.mUICheckButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUICheckButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICheckButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuittoMainMenuWindow : WinWindow
    {
        
        public UIQuittoMainMenuWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonQuitToMenu";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UIQuittoMainMenuButton
        {
            get
            {
                if ((this.mUIQuittoMainMenuButton == null))
                {
                    this.mUIQuittoMainMenuButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuittoMainMenuButton.SearchProperties[WinButton.PropertyNames.Name] = "Quit to Main Menu";
                    this.mUIQuittoMainMenuButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUIQuittoMainMenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIQuittoMainMenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRaiseWindow : WinWindow
    {
        
        public UIRaiseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonRaise";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UIRaiseButton
        {
            get
            {
                if ((this.mUIRaiseButton == null))
                {
                    this.mUIRaiseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRaiseButton.SearchProperties[WinButton.PropertyNames.Name] = "Raise";
                    this.mUIRaiseButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUIRaiseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRaiseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeepPerTitleBar : WinTitleBar
    {
        
        public UIDeepPerTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UILukButton
        {
            get
            {
                if ((this.mUILukButton == null))
                {
                    this.mUILukButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILukButton.SearchProperties[WinButton.PropertyNames.Name] = "Luk";
                    this.mUILukButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUILukButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILukButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHandWinnerWindow : WinWindow
    {
        
        public UIHandWinnerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Hand Winner";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Hand Winner");
            #endregion
        }
        
        #region Properties
        public UIContinueWindow UIContinueWindow
        {
            get
            {
                if ((this.mUIContinueWindow == null))
                {
                    this.mUIContinueWindow = new UIContinueWindow(this);
                }
                return this.mUIContinueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIContinueWindow mUIContinueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContinueWindow : WinWindow
    {
        
        public UIContinueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonContinue";
            this.WindowTitles.Add("Hand Winner");
            #endregion
        }
        
        #region Properties
        public WinButton UIContinueButton
        {
            get
            {
                if ((this.mUIContinueButton == null))
                {
                    this.mUIContinueButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContinueButton.SearchProperties[WinButton.PropertyNames.Name] = "Continue";
                    this.mUIContinueButton.WindowTitles.Add("Hand Winner");
                    #endregion
                }
                return this.mUIContinueButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIContinueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIConfirmationWindow : WinWindow
    {
        
        public UIConfirmationWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirmation";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Confirmation");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonYes";
            this.WindowTitles.Add("Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirmation");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMenuFormWindow1 : WinWindow
    {
        
        public UIMenuFormWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MenuForm";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public UIStatisticsWindow UIStatisticsWindow
        {
            get
            {
                if ((this.mUIStatisticsWindow == null))
                {
                    this.mUIStatisticsWindow = new UIStatisticsWindow(this);
                }
                return this.mUIStatisticsWindow;
            }
        }
        
        public UIQuitWindow UIQuitWindow
        {
            get
            {
                if ((this.mUIQuitWindow == null))
                {
                    this.mUIQuitWindow = new UIQuitWindow(this);
                }
                return this.mUIQuitWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIStatisticsWindow mUIStatisticsWindow;
        
        private UIQuitWindow mUIQuitWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStatisticsWindow : WinWindow
    {
        
        public UIStatisticsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonStatistics";
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public WinButton UIStatisticsButton
        {
            get
            {
                if ((this.mUIStatisticsButton == null))
                {
                    this.mUIStatisticsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStatisticsButton.SearchProperties[WinButton.PropertyNames.Name] = "Statistics";
                    this.mUIStatisticsButton.WindowTitles.Add("MenuForm");
                    #endregion
                }
                return this.mUIStatisticsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStatisticsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuitWindow : WinWindow
    {
        
        public UIQuitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonQuit";
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public WinButton UIQuitButton
        {
            get
            {
                if ((this.mUIQuitButton == null))
                {
                    this.mUIQuitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuitButton.SearchProperties[WinButton.PropertyNames.Name] = "Quit";
                    this.mUIQuitButton.WindowTitles.Add("MenuForm");
                    #endregion
                }
                return this.mUIQuitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIQuitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStatisticsWindow1 : WinWindow
    {
        
        public UIStatisticsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Statistics";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Statistics");
            #endregion
        }
        
        #region Properties
        public UIBacktoMenuWindow UIBacktoMenuWindow
        {
            get
            {
                if ((this.mUIBacktoMenuWindow == null))
                {
                    this.mUIBacktoMenuWindow = new UIBacktoMenuWindow(this);
                }
                return this.mUIBacktoMenuWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBacktoMenuWindow mUIBacktoMenuWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBacktoMenuWindow : WinWindow
    {
        
        public UIBacktoMenuWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonBackToMenu";
            this.WindowTitles.Add("Statistics");
            #endregion
        }
        
        #region Properties
        public WinButton UIBacktoMenuButton
        {
            get
            {
                if ((this.mUIBacktoMenuButton == null))
                {
                    this.mUIBacktoMenuButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBacktoMenuButton.SearchProperties[WinButton.PropertyNames.Name] = "Back to Menu";
                    this.mUIBacktoMenuButton.WindowTitles.Add("Statistics");
                    #endregion
                }
                return this.mUIBacktoMenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBacktoMenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMenuFormWindow2 : WinWindow
    {
        
        public UIMenuFormWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MenuForm";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public UINewGameWindow1 UINewGameWindow
        {
            get
            {
                if ((this.mUINewGameWindow == null))
                {
                    this.mUINewGameWindow = new UINewGameWindow1(this);
                }
                return this.mUINewGameWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewGameWindow1 mUINewGameWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINewGameWindow1 : WinWindow
    {
        
        public UINewGameWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonNewGame";
            this.WindowTitles.Add("MenuForm");
            #endregion
        }
        
        #region Properties
        public WinButton UINewGameButton
        {
            get
            {
                if ((this.mUINewGameButton == null))
                {
                    this.mUINewGameButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINewGameButton.SearchProperties[WinButton.PropertyNames.Name] = "New Game";
                    this.mUINewGameButton.WindowTitles.Add("MenuForm");
                    #endregion
                }
                return this.mUINewGameButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINewGameButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISettingsWindow1 : WinWindow
    {
        
        public UISettingsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Settings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public UITimeBasedWindow1 UITimeBasedWindow
        {
            get
            {
                if ((this.mUITimeBasedWindow == null))
                {
                    this.mUITimeBasedWindow = new UITimeBasedWindow1(this);
                }
                return this.mUITimeBasedWindow;
            }
        }
        
        public WinClient UISettingsClient
        {
            get
            {
                if ((this.mUISettingsClient == null))
                {
                    this.mUISettingsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISettingsClient.SearchProperties[WinControl.PropertyNames.Name] = "Settings";
                    this.mUISettingsClient.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUISettingsClient;
            }
        }
        
        public UIRoundbasedWindow1 UIRoundbasedWindow
        {
            get
            {
                if ((this.mUIRoundbasedWindow == null))
                {
                    this.mUIRoundbasedWindow = new UIRoundbasedWindow1(this);
                }
                return this.mUIRoundbasedWindow;
            }
        }
        
        public UITrackBarPotSizeWindow1 UITrackBarPotSizeWindow
        {
            get
            {
                if ((this.mUITrackBarPotSizeWindow == null))
                {
                    this.mUITrackBarPotSizeWindow = new UITrackBarPotSizeWindow1(this);
                }
                return this.mUITrackBarPotSizeWindow;
            }
        }
        
        public UITrackBarBlindSizeWindow1 UITrackBarBlindSizeWindow
        {
            get
            {
                if ((this.mUITrackBarBlindSizeWindow == null))
                {
                    this.mUITrackBarBlindSizeWindow = new UITrackBarBlindSizeWindow1(this);
                }
                return this.mUITrackBarBlindSizeWindow;
            }
        }
        
        public UIStartGameWindow1 UIStartGameWindow
        {
            get
            {
                if ((this.mUIStartGameWindow == null))
                {
                    this.mUIStartGameWindow = new UIStartGameWindow1(this);
                }
                return this.mUIStartGameWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITimeBasedWindow1 mUITimeBasedWindow;
        
        private WinClient mUISettingsClient;
        
        private UIRoundbasedWindow1 mUIRoundbasedWindow;
        
        private UITrackBarPotSizeWindow1 mUITrackBarPotSizeWindow;
        
        private UITrackBarBlindSizeWindow1 mUITrackBarBlindSizeWindow;
        
        private UIStartGameWindow1 mUIStartGameWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITimeBasedWindow1 : WinWindow
    {
        
        public UITimeBasedWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBoxTimeBased";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UITimeBasedCheckBox
        {
            get
            {
                if ((this.mUITimeBasedCheckBox == null))
                {
                    this.mUITimeBasedCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUITimeBasedCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Time Based";
                    this.mUITimeBasedCheckBox.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITimeBasedCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUITimeBasedCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRoundbasedWindow1 : WinWindow
    {
        
        public UIRoundbasedWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBoxRoundBased";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIRoundbasedCheckBox
        {
            get
            {
                if ((this.mUIRoundbasedCheckBox == null))
                {
                    this.mUIRoundbasedCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIRoundbasedCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Round based";
                    this.mUIRoundbasedCheckBox.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUIRoundbasedCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIRoundbasedCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITrackBarPotSizeWindow1 : WinWindow
    {
        
        public UITrackBarPotSizeWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trackBarPotSize";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinSlider UITrackBarPotSizeSlider
        {
            get
            {
                if ((this.mUITrackBarPotSizeSlider == null))
                {
                    this.mUITrackBarPotSizeSlider = new WinSlider(this);
                    #region Search Criteria
                    this.mUITrackBarPotSizeSlider.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITrackBarPotSizeSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUITrackBarPotSizeSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITrackBarBlindSizeWindow1 : WinWindow
    {
        
        public UITrackBarBlindSizeWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trackBarBlindSize";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinSlider UITrackBarBlindSizeSlider
        {
            get
            {
                if ((this.mUITrackBarBlindSizeSlider == null))
                {
                    this.mUITrackBarBlindSizeSlider = new WinSlider(this);
                    #region Search Criteria
                    this.mUITrackBarBlindSizeSlider.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUITrackBarBlindSizeSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUITrackBarBlindSizeSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartGameWindow1 : WinWindow
    {
        
        public UIStartGameWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonStartGame";
            this.WindowTitles.Add("Settings");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartGameButton
        {
            get
            {
                if ((this.mUIStartGameButton == null))
                {
                    this.mUIStartGameButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartGameButton.SearchProperties[WinButton.PropertyNames.Name] = "Start Game";
                    this.mUIStartGameButton.WindowTitles.Add("Settings");
                    #endregion
                }
                return this.mUIStartGameButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartGameButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeepPerWindow1 : WinWindow
    {
        
        public UIDeepPerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Deep Per";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public UIRaiseWindow1 UIRaiseWindow
        {
            get
            {
                if ((this.mUIRaiseWindow == null))
                {
                    this.mUIRaiseWindow = new UIRaiseWindow1(this);
                }
                return this.mUIRaiseWindow;
            }
        }
        
        public UICallWindow1 UICallWindow
        {
            get
            {
                if ((this.mUICallWindow == null))
                {
                    this.mUICallWindow = new UICallWindow1(this);
                }
                return this.mUICallWindow;
            }
        }
        
        public UICheckWindow1 UICheckWindow
        {
            get
            {
                if ((this.mUICheckWindow == null))
                {
                    this.mUICheckWindow = new UICheckWindow1(this);
                }
                return this.mUICheckWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRaiseWindow1 mUIRaiseWindow;
        
        private UICallWindow1 mUICallWindow;
        
        private UICheckWindow1 mUICheckWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRaiseWindow1 : WinWindow
    {
        
        public UIRaiseWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonRaise";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UIRaiseButton
        {
            get
            {
                if ((this.mUIRaiseButton == null))
                {
                    this.mUIRaiseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRaiseButton.SearchProperties[WinButton.PropertyNames.Name] = "Raise";
                    this.mUIRaiseButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUIRaiseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRaiseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICallWindow1 : WinWindow
    {
        
        public UICallWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCall";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UICallButton
        {
            get
            {
                if ((this.mUICallButton == null))
                {
                    this.mUICallButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICallButton.SearchProperties[WinButton.PropertyNames.Name] = "Call";
                    this.mUICallButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUICallButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICallButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICheckWindow1 : WinWindow
    {
        
        public UICheckWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonCheck";
            this.WindowTitles.Add("Deep Per");
            #endregion
        }
        
        #region Properties
        public WinButton UICheckButton
        {
            get
            {
                if ((this.mUICheckButton == null))
                {
                    this.mUICheckButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICheckButton.SearchProperties[WinButton.PropertyNames.Name] = "Check";
                    this.mUICheckButton.WindowTitles.Add("Deep Per");
                    #endregion
                }
                return this.mUICheckButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICheckButton;
        #endregion
    }
}
